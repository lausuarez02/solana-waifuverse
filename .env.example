# Farcaster Quick Auth
# These should already be set

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here

# Admin Panel Protection
ADMIN_PASSWORD=your_secret_admin_password_here
NEXT_PUBLIC_ADMIN_PASSWORD=your_secret_admin_password_here

# ====================================
# SOLANA CONFIGURATION
# ====================================

# Solana Network (mainnet-beta, testnet, or devnet)
# Start with devnet for testing, then switch to mainnet-beta for production
NEXT_PUBLIC_SOLANA_NETWORK=devnet

# Solana RPC URL (use a dedicated RPC provider for better performance)
# Free options: https://api.devnet.solana.com (devnet) or https://api.mainnet-beta.solana.com (mainnet, rate limited)
# Paid options: QuickNode, Helius, Alchemy, Triton (recommended for production)
NEXT_PUBLIC_SOLANA_RPC_URL=https://api.devnet.solana.com

# Your Solana Program ID (deployed Waifu Mint NFT program)
# Current deployed program on DEVNET: GQaqDnGCnWCCJcx3sXYgXzVN678Aw1jPWWqYBD4esbVW
# Explorer: https://explorer.solana.com/address/GQaqDnGCnWCCJcx3sXYgXzVN678Aw1jPWWqYBD4esbVW?cluster=devnet
NEXT_PUBLIC_SOLANA_PROGRAM_ID=GQaqDnGCnWCCJcx3sXYgXzVN678Aw1jPWWqYBD4esbVW

# Owner/Admin Wallet (controls the contract - add waifus, withdraw funds, etc.)
# Public Key: 9VBcMwWJwTQEm4Ye8Lw4d9VW1kUkp8GZL9uaK5zr5KH1
OWNER_WALLET=9VBcMwWJwTQEm4Ye8Lw4d9VW1kUkp8GZL9uaK5zr5KH1

# Game Signer Private Key (Base58 encoded Solana keypair)
# Used for server-side signing of mint authorization
# Public Key: 8aYte6wTH8n5Rn3C1eJXpZXAmEJRnPBWopnMAfL8eAZb
# IMPORTANT: Never commit the actual private key to git!
# NOTE: If not configured, will use mock signature (testing only - not secure!)
# To convert game-signer.json to base58 format:
#   node scripts/convert-keypair.js game-signer.json
# Or manually:
#   node -e "const fs = require('fs'); const bs58 = require('bs58'); const keypair = JSON.parse(fs.readFileSync('game-signer.json')); console.log(bs58.encode(Buffer.from(keypair)));"
GAME_SIGNER_PRIVATE_KEY=

# ====================================
# REOWN (WalletConnect) CONFIGURATION
# ====================================

# Reown Project ID (formerly WalletConnect)
# Get one for free at: https://cloud.reown.com/
# This enables WalletConnect support for your app
NEXT_PUBLIC_REOWN_PROJECT_ID=your_reown_project_id_here

# App URL (used for Reown metadata)
NEXT_PUBLIC_URL=https://your-app.com

# ====================================
# HOW TO GENERATE A SOLANA KEYPAIR
# ====================================
# 1. Install Solana CLI: https://docs.solana.com/cli/install-solana-cli-tools
# 2. Generate keypair: solana-keygen new --no-passphrase -o authority.json
# 3. View public key: solana-keygen pubkey authority.json
# 4. Convert to base58 for env variable:
#    node -e "const fs = require('fs'); const bs58 = require('bs58'); const keypair = JSON.parse(fs.readFileSync('authority.json')); console.log(bs58.encode(Buffer.from(keypair)));"
